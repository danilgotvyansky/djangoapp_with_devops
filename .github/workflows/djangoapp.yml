name: Django CI

on:
  push:
    branches: [ "main" ]
    paths:
    - "vagrant/djangoapp/**"    
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: control
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]

    steps:
    - name: Remove everything in _work
      run: sudo rm -rf djangoapp_with_devops
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set up MariaDB
      run: |
        sudo apt-get -y update
        sudo apt-get -y install build-essential
        sudo apt-get -y install mariadb-server
        sudo apt-get -y install libmysqlclient-dev
    - name: Check if database and user exist
      run: |
        sudo mysql -e "SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME='$DB_NAME'" | grep $DB_NAME
        if [ $? -eq 0 ]
        then
          echo "Database already exists, skipping creation"
          export DB_EXISTS=true
        else
          echo "Database does not exist, creating"
          sudo mysql -e "CREATE DATABASE $DB_NAME;"
          export DB_EXISTS=false
        fi
        sudo mysql -e "SELECT User FROM mysql.user WHERE User='$DB_USER'" | grep $DB_USER
        if [ $? -eq 0 ]
        then
          echo "User already exists, skipping creation"
          export USER_EXISTS=true
        else
          echo "User does not exist, creating"
          sudo mysql -e "CREATE USER $DB_USER@localhost IDENTIFIED BY '$DB_PASSWORD';"
          export USER_EXISTS=false
        fi
        if [ "$DB_EXISTS" = true ] && [ "$USER_EXISTS" = true ]
        then
          export SKIP_DB_USER_CREATION=true
        else
          export SKIP_DB_USER_CREATION=false
        fi
      env:
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        
    - name: Install Dependencies
      run: |
        cd vagrant/djangoapp
        python -m pip install --upgrade pip       
        pip install --use-pep517 -r requirements.txt
    - name: Run Tests
      env:
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: 192.168.6.2
        DB_PORT: ${{ secrets.DB_PORT }}
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DEBUG: TRUE
      run: |
        cd vagrant/djangoapp
        python manage.py test

    - name: Login to GitHub Container Registry
      run: |
        echo "${{ secrets.GIT_PAT }}" | sudo docker login ghcr.io -u "${{ github.actor }}" --password-stdin

    - name: Build and Push Docker Image
      run: |
        sudo docker build -t ghcr.io/danilgotvyansky/djangoapp_with_devops:latest vagrant/djangoapp
        sudo docker push ghcr.io/danilgotvyansky/djangoapp_with_devops:latest 

  deploynode1:

    needs: build
    runs-on: node1
    steps:
    - name: Remove everything in _work
      run: sudo rm -rf djangoapp_with_devops

    - name: Login to GitHub Container Registry
      run: |
        echo "${{ secrets.GIT_PAT }}" | sudo docker login ghcr.io -u "${{ github.actor }}" --password-stdin

    - name: Start MariaDB on node1
      run: |
        if [[ "$(docker ps -q -f name=mariadb)" ]]; then
            echo "MariaDB container already exists."
        else
            sudo docker run --name mariadb -d \
              -v $PWD/mariadb:/var/lib/mysql \
              -e MARIADB_ROOT_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e MARIADB_DATABASE=${{ secrets.DB_NAME }} \
              -e MARIADB_USER=${{ secrets.DB_USER }} \
              -e MARIADB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -p 3306:3306 \
              mariadb/server:10.3 \
              --character-set-server=utf8 --collation-server=utf8_bin --init-connect='SET NAMES UTF8;'
            echo "MariaDB container created."
        fi
    - name: Start Application on node1
      run: |
        sudo docker rm -f djangoapp
        echo "${{ secrets.GIT_PAT }}" | sudo docker login ghcr.io -u "${{ github.actor }}" --password-stdin
        sudo docker pull ghcr.io/danilgotvyansky/djangoapp_with_devops:latest
        sudo docker run --name djangoapp -d \
          -e DB_NAME=${{ secrets.DB_NAME }} \
          -e DB_USER=${{ secrets.DB_USER }} \
          -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
          -e DB_HOST=192.168.6.3 \
          -e DB_PORT=3306 \
          -e DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" \
          -e DEBUG=TRUE \
          -p 8000:8000 \
          --link mariadb:db \
          ghcr.io/danilgotvyansky/djangoapp_with_devops:latest \
          sh -c "python manage.py migrate &&
                 python manage.py collectstatic --noinput &&
                 python manage.py runserver 0.0.0.0:8000"

  deploynode2:

    needs: build
    runs-on: node2
    steps:
    - name: Remove everything in _work
      run: sudo rm -rf djangoapp_with_devops

    - name: Login to GitHub Container Registry
      run: |
        echo "${{ secrets.GIT_PAT }}" | sudo docker login ghcr.io -u "${{ github.actor }}" --password-stdin

    - name: Start MariaDB on node2
      run: |
        if [[ "$(docker ps -q -f name=mariadb)" ]]; then
            echo "MariaDB container already exists."
        else
            sudo docker run --name mariadb -d \
              -v $PWD/mariadb:/var/lib/mysql \
              -e MARIADB_ROOT_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e MARIADB_DATABASE=${{ secrets.DB_NAME }} \
              -e MARIADB_USER=${{ secrets.DB_USER }} \
              -e MARIADB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -p 3306:3306 \
              mariadb/server:10.3 \
              --character-set-server=utf8 --collation-server=utf8_bin --init-connect='SET NAMES UTF8;'
            echo "MariaDB container created."
        fi
    - name: Start Application on node2
      run: |
        sudo docker rm -f djangoapp
        echo "${{ secrets.GIT_PAT }}" | sudo docker login ghcr.io -u "${{ github.actor }}" --password-stdin
        sudo docker pull ghcr.io/danilgotvyansky/djangoapp_with_devops:latest
        sudo docker run --name djangoapp -d \
          -e DB_NAME=${{ secrets.DB_NAME }} \
          -e DB_USER=${{ secrets.DB_USER }} \
          -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
          -e DB_HOST=192.168.6.4 \
          -e DB_PORT=3306 \
          -e DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" \
          -e DEBUG=TRUE \
          -p 8000:8000 \
          --link mariadb:db \
          ghcr.io/danilgotvyansky/djangoapp_with_devops:latest \
          sh -c "python manage.py migrate &&
                 python manage.py collectstatic --noinput &&
                 python manage.py runserver 0.0.0.0:8000"
