name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_HOST: 192.168.6.2
  DB_PORT: ${{ secrets.DB_PORT }}
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  DEBUG: TRUE

jobs:
  build:

    runs-on: control
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]

    steps:
    - name: Remove everything in _work
      run: sudo rm -rf djangoapp_with_devops
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set up MariaDB
      run: |
        sudo apt-get -y update
        sudo apt-get -y install build-essential
        sudo apt-get -y install mariadb-server
        sudo apt-get -y install libmysqlclient-dev
    - name: Check if database and user exist
      run: |
        sudo mysql -e "SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME='$DB_NAME'" | grep $DB_NAME
        if [ $? -eq 0 ]
        then
          echo "Database already exists, skipping creation"
          export DB_EXISTS=true
        else
          echo "Database does not exist, creating"
          sudo mysql -e "CREATE DATABASE $DB_NAME;"
          export DB_EXISTS=false
        fi
        sudo mysql -e "SELECT User FROM mysql.user WHERE User='$DB_USER'" | grep $DB_USER
        if [ $? -eq 0 ]
        then
          echo "User already exists, skipping creation"
          export USER_EXISTS=true
        else
          echo "User does not exist, creating"
          sudo mysql -e "CREATE USER $DB_USER@localhost IDENTIFIED BY '$DB_PASSWORD';"
          sudo mysql -e "GRANT ALL PRIVILEGES ON $DB_NAME.* TO $DB_USER@localhost;"
          sudo mysql -e "FLUSH PRIVILEGES;"
          export USER_EXISTS=false
        fi
      env:
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
    - name: Install Dependencies
      run: |
        cd vagrant/djangoapp
        python -m pip install --upgrade pip       
        pip install --use-pep517 -r requirements.txt
    - name: Run Tests
      env:
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: 192.168.6.2
        DB_PORT: ${{ secrets.DB_PORT }}
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DEBUG: TRUE
      run: |
        cd vagrant/djangoapp
        python manage.py test
        
    - name: Login to GitHub Container Registry
      run: |
        echo "${{ secrets.GIT_PAT }}" | sudo docker login ghcr.io -u "${{ github.actor }}" --password-stdin
    
    - name: Build and Push Docker Image
      run: |
        sudo docker build -t ghcr.io/danilgotvyansky/djangoapp_with_devops:latest vagrant/djangoapp
        sudo docker push ghcr.io/danilgotvyansky/djangoapp_with_devops:latest 

#     - name: Deploy image to control
#       run: |
#         cd /
#         cd /vagrant/djangoapp
#         sudo docker-compose logs
#         sudo docker-compose up -d
#         sudo docker-compose ps
#         sudo docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' djangoapp_application_1
  deploynode1:

    runs-on: node1
    steps:
    
    - name: Login to GitHub Container Registry
      run: |
        echo "${{ secrets.GIT_PAT }}" | sudo docker login ghcr.io -u "${{ github.actor }}" --password-stdin
        
    - name: Start MariaDB on node1
      run: |
        sudo docker rm -f mariadb
        sudo docker run --name mariadb -d \
          -v $PWD/mariadb:/var/lib/mysql \
          -e MARIADB_ROOT_PASSWORD=${{ secrets.DB_PASSWORD }} \
          -e MARIADB_DATABASE=${{ secrets.DB_NAME }} \
          -e MARIADB_USER=${{ secrets.DB_USER }} \
          -e MARIADB_PASSWORD=${{ secrets.DB_PASSWORD }} \
          -p 3306:3306 \
          mariadb/server:10.3
    - name: Start Application on node1
      run: |
        sudo docker rm -f djangoapp
        sudo docker run --name djangoapp -d \
          -e DB_NAME: ${{ secrets.DB_NAME }}
          -e DB_USER: ${{ secrets.DB_USER }}
          -e DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          -e DB_HOST: 192.168.6.3
          -e DB_PORT: 3306 \
          -e DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          -e DEBUG: TRUE
          -e DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }} \
          -e DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }} \
          -e DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }} \
          -p 8000:8000 \
          --link mariadb:db \
          ghcr.io/danilgotvyansky/djangoapp_with_devops:latest \
          sh -c "echo "${{ secrets.GIT_PAT }}" | sudo docker login ghcr.io -u "${{ github.actor }}" --password-stdin &&
                 python manage.py migrate &&
                 python manage.py collectstatic --noinput &&
                 DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD} DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME} DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL} python manage.py createsuperuser --noinput &&
                 python manage.py runserver 0.0.0.0:8000"

#     - name: Log out from node1
#       run: exit

#     - name: Deploy image to node2
#       run: |
#         ssh node2
#         cd /
#         cd /vagrant/djangoapp
#         sudo docker-compose up -d
#         sudo docker-compose ps
#         sudo docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' djangoapp_application_1

#     - name: Log out from node2
#       run: exit
      
